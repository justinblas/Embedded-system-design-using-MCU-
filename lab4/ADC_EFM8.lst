0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Fri Mar 05 21:23:36 2021
0000              5   ;--------------------------------------------------------
                  5   $name ADC_EFM8
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _getsn
0000             30            public _LCDprint
0000             31            public _LCD_4BIT
0000             32            public _WriteCommand
0000             33            public _WriteData
0000             34            public _LCD_byte
0000             35            public _LCD_pulse
0000             36            public _Volts_at_Pin
0000             37            public _ADC_at_Pin
0000             38            public _InitPinADC
0000             39            public _waitms
0000             40            public _Timer3us
0000             41            public _InitADC
0000             42            public __c51_external_startup
0000             43            public _LCDprint_PARM_3
0000             44            public _getsn_PARM_2
0000             45            public _LCDprint_PARM_2
0000             46   ;--------------------------------------------------------
0000             47   ; Special Function Registers
0000             48   ;--------------------------------------------------------
0000             49   _ACC            DATA 0xe0
0000             50   _ADC0ASAH       DATA 0xb6
0000             51   _ADC0ASAL       DATA 0xb5
0000             52   _ADC0ASCF       DATA 0xa1
0000             53   _ADC0ASCT       DATA 0xc7
0000             54   _ADC0CF0        DATA 0xbc
0000             55   _ADC0CF1        DATA 0xb9
0000             56   _ADC0CF2        DATA 0xdf
0000             57   _ADC0CN0        DATA 0xe8
0000             58   _ADC0CN1        DATA 0xb2
0000             59   _ADC0CN2        DATA 0xb3
0000             60   _ADC0GTH        DATA 0xc4
0000             61   _ADC0GTL        DATA 0xc3
0000             62   _ADC0H          DATA 0xbe
0000             63   _ADC0L          DATA 0xbd
0000             64   _ADC0LTH        DATA 0xc6
0000             65   _ADC0LTL        DATA 0xc5
0000             66   _ADC0MX         DATA 0xbb
0000             67   _B              DATA 0xf0
0000             68   _CKCON0         DATA 0x8e
0000             69   _CKCON1         DATA 0xa6
0000             70   _CLEN0          DATA 0xc6
0000             71   _CLIE0          DATA 0xc7
0000             72   _CLIF0          DATA 0xe8
0000             73   _CLKSEL         DATA 0xa9
0000             74   _CLOUT0         DATA 0xd1
0000             75   _CLU0CF         DATA 0xb1
0000             76   _CLU0FN         DATA 0xaf
0000             77   _CLU0MX         DATA 0x84
0000             78   _CLU1CF         DATA 0xb3
0000             79   _CLU1FN         DATA 0xb2
0000             80   _CLU1MX         DATA 0x85
0000             81   _CLU2CF         DATA 0xb6
0000             82   _CLU2FN         DATA 0xb5
0000             83   _CLU2MX         DATA 0x91
0000             84   _CLU3CF         DATA 0xbf
0000             85   _CLU3FN         DATA 0xbe
0000             86   _CLU3MX         DATA 0xae
0000             87   _CMP0CN0        DATA 0x9b
0000             88   _CMP0CN1        DATA 0x99
0000             89   _CMP0MD         DATA 0x9d
0000             90   _CMP0MX         DATA 0x9f
0000             91   _CMP1CN0        DATA 0xbf
0000             92   _CMP1CN1        DATA 0xac
0000             93   _CMP1MD         DATA 0xab
0000             94   _CMP1MX         DATA 0xaa
0000             95   _CRC0CN0        DATA 0xce
0000             96   _CRC0CN1        DATA 0x86
0000             97   _CRC0CNT        DATA 0xd3
0000             98   _CRC0DAT        DATA 0xcb
0000             99   _CRC0FLIP       DATA 0xcf
0000            100   _CRC0IN         DATA 0xca
0000            101   _CRC0ST         DATA 0xd2
0000            102   _DAC0CF0        DATA 0x91
0000            103   _DAC0CF1        DATA 0x92
0000            104   _DAC0H          DATA 0x85
0000            105   _DAC0L          DATA 0x84
0000            106   _DAC1CF0        DATA 0x93
0000            107   _DAC1CF1        DATA 0x94
0000            108   _DAC1H          DATA 0x8a
0000            109   _DAC1L          DATA 0x89
0000            110   _DAC2CF0        DATA 0x95
0000            111   _DAC2CF1        DATA 0x96
0000            112   _DAC2H          DATA 0x8c
0000            113   _DAC2L          DATA 0x8b
0000            114   _DAC3CF0        DATA 0x9a
0000            115   _DAC3CF1        DATA 0x9c
0000            116   _DAC3H          DATA 0x8e
0000            117   _DAC3L          DATA 0x8d
0000            118   _DACGCF0        DATA 0x88
0000            119   _DACGCF1        DATA 0x98
0000            120   _DACGCF2        DATA 0xa2
0000            121   _DERIVID        DATA 0xad
0000            122   _DEVICEID       DATA 0xb5
0000            123   _DPH            DATA 0x83
0000            124   _DPL            DATA 0x82
0000            125   _EIE1           DATA 0xe6
0000            126   _EIE2           DATA 0xf3
0000            127   _EIP1           DATA 0xbb
0000            128   _EIP1H          DATA 0xee
0000            129   _EIP2           DATA 0xed
0000            130   _EIP2H          DATA 0xf6
0000            131   _EMI0CN         DATA 0xe7
0000            132   _FLKEY          DATA 0xb7
0000            133   _HFO0CAL        DATA 0xc7
0000            134   _HFO1CAL        DATA 0xd6
0000            135   _HFOCN          DATA 0xef
0000            136   _I2C0ADM        DATA 0xff
0000            137   _I2C0CN0        DATA 0xba
0000            138   _I2C0DIN        DATA 0xbc
0000            139   _I2C0DOUT       DATA 0xbb
0000            140   _I2C0FCN0       DATA 0xad
0000            141   _I2C0FCN1       DATA 0xab
0000            142   _I2C0FCT        DATA 0xf5
0000            143   _I2C0SLAD       DATA 0xbd
0000            144   _I2C0STAT       DATA 0xb9
0000            145   _IE             DATA 0xa8
0000            146   _IP             DATA 0xb8
0000            147   _IPH            DATA 0xf2
0000            148   _IT01CF         DATA 0xe4
0000            149   _LFO0CN         DATA 0xb1
0000            150   _P0             DATA 0x80
0000            151   _P0MASK         DATA 0xfe
0000            152   _P0MAT          DATA 0xfd
0000            153   _P0MDIN         DATA 0xf1
0000            154   _P0MDOUT        DATA 0xa4
0000            155   _P0SKIP         DATA 0xd4
0000            156   _P1             DATA 0x90
0000            157   _P1MASK         DATA 0xee
0000            158   _P1MAT          DATA 0xed
0000            159   _P1MDIN         DATA 0xf2
0000            160   _P1MDOUT        DATA 0xa5
0000            161   _P1SKIP         DATA 0xd5
0000            162   _P2             DATA 0xa0
0000            163   _P2MASK         DATA 0xfc
0000            164   _P2MAT          DATA 0xfb
0000            165   _P2MDIN         DATA 0xf3
0000            166   _P2MDOUT        DATA 0xa6
0000            167   _P2SKIP         DATA 0xcc
0000            168   _P3             DATA 0xb0
0000            169   _P3MDIN         DATA 0xf4
0000            170   _P3MDOUT        DATA 0x9c
0000            171   _PCA0CENT       DATA 0x9e
0000            172   _PCA0CLR        DATA 0x9c
0000            173   _PCA0CN0        DATA 0xd8
0000            174   _PCA0CPH0       DATA 0xfc
0000            175   _PCA0CPH1       DATA 0xea
0000            176   _PCA0CPH2       DATA 0xec
0000            177   _PCA0CPH3       DATA 0xf5
0000            178   _PCA0CPH4       DATA 0x85
0000            179   _PCA0CPH5       DATA 0xde
0000            180   _PCA0CPL0       DATA 0xfb
0000            181   _PCA0CPL1       DATA 0xe9
0000            182   _PCA0CPL2       DATA 0xeb
0000            183   _PCA0CPL3       DATA 0xf4
0000            184   _PCA0CPL4       DATA 0x84
0000            185   _PCA0CPL5       DATA 0xdd
0000            186   _PCA0CPM0       DATA 0xda
0000            187   _PCA0CPM1       DATA 0xdb
0000            188   _PCA0CPM2       DATA 0xdc
0000            189   _PCA0CPM3       DATA 0xae
0000            190   _PCA0CPM4       DATA 0xaf
0000            191   _PCA0CPM5       DATA 0xcc
0000            192   _PCA0H          DATA 0xfa
0000            193   _PCA0L          DATA 0xf9
0000            194   _PCA0MD         DATA 0xd9
0000            195   _PCA0POL        DATA 0x96
0000            196   _PCA0PWM        DATA 0xf7
0000            197   _PCON0          DATA 0x87
0000            198   _PCON1          DATA 0xcd
0000            199   _PFE0CN         DATA 0xc1
0000            200   _PRTDRV         DATA 0xf6
0000            201   _PSCTL          DATA 0x8f
0000            202   _PSTAT0         DATA 0xaa
0000            203   _PSW            DATA 0xd0
0000            204   _REF0CN         DATA 0xd1
0000            205   _REG0CN         DATA 0xc9
0000            206   _REVID          DATA 0xb6
0000            207   _RSTSRC         DATA 0xef
0000            208   _SBCON1         DATA 0x94
0000            209   _SBRLH1         DATA 0x96
0000            210   _SBRLL1         DATA 0x95
0000            211   _SBUF           DATA 0x99
0000            212   _SBUF0          DATA 0x99
0000            213   _SBUF1          DATA 0x92
0000            214   _SCON           DATA 0x98
0000            215   _SCON0          DATA 0x98
0000            216   _SCON1          DATA 0xc8
0000            217   _SFRPAGE        DATA 0xa7
0000            218   _SFRPGCN        DATA 0xbc
0000            219   _SFRSTACK       DATA 0xd7
0000            220   _SMB0ADM        DATA 0xd6
0000            221   _SMB0ADR        DATA 0xd7
0000            222   _SMB0CF         DATA 0xc1
0000            223   _SMB0CN0        DATA 0xc0
0000            224   _SMB0DAT        DATA 0xc2
0000            225   _SMB0FCN0       DATA 0xc3
0000            226   _SMB0FCN1       DATA 0xc4
0000            227   _SMB0FCT        DATA 0xef
0000            228   _SMB0RXLN       DATA 0xc5
0000            229   _SMB0TC         DATA 0xac
0000            230   _SMOD1          DATA 0x93
0000            231   _SP             DATA 0x81
0000            232   _SPI0CFG        DATA 0xa1
0000            233   _SPI0CKR        DATA 0xa2
0000            234   _SPI0CN0        DATA 0xf8
0000            235   _SPI0DAT        DATA 0xa3
0000            236   _SPI0FCN0       DATA 0x9a
0000            237   _SPI0FCN1       DATA 0x9b
0000            238   _SPI0FCT        DATA 0xf7
0000            239   _SPI0PCF        DATA 0xdf
0000            240   _TCON           DATA 0x88
0000            241   _TH0            DATA 0x8c
0000            242   _TH1            DATA 0x8d
0000            243   _TL0            DATA 0x8a
0000            244   _TL1            DATA 0x8b
0000            245   _TMOD           DATA 0x89
0000            246   _TMR2CN0        DATA 0xc8
0000            247   _TMR2CN1        DATA 0xfd
0000            248   _TMR2H          DATA 0xcf
0000            249   _TMR2L          DATA 0xce
0000            250   _TMR2RLH        DATA 0xcb
0000            251   _TMR2RLL        DATA 0xca
0000            252   _TMR3CN0        DATA 0x91
0000            253   _TMR3CN1        DATA 0xfe
0000            254   _TMR3H          DATA 0x95
0000            255   _TMR3L          DATA 0x94
0000            256   _TMR3RLH        DATA 0x93
0000            257   _TMR3RLL        DATA 0x92
0000            258   _TMR4CN0        DATA 0x98
0000            259   _TMR4CN1        DATA 0xff
0000            260   _TMR4H          DATA 0xa5
0000            261   _TMR4L          DATA 0xa4
0000            262   _TMR4RLH        DATA 0xa3
0000            263   _TMR4RLL        DATA 0xa2
0000            264   _TMR5CN0        DATA 0xc0
0000            265   _TMR5CN1        DATA 0xf1
0000            266   _TMR5H          DATA 0xd5
0000            267   _TMR5L          DATA 0xd4
0000            268   _TMR5RLH        DATA 0xd3
0000            269   _TMR5RLL        DATA 0xd2
0000            270   _UART0PCF       DATA 0xd9
0000            271   _UART1FCN0      DATA 0x9d
0000            272   _UART1FCN1      DATA 0xd8
0000            273   _UART1FCT       DATA 0xfa
0000            274   _UART1LIN       DATA 0x9e
0000            275   _UART1PCF       DATA 0xda
0000            276   _VDM0CN         DATA 0xff
0000            277   _WDTCN          DATA 0x97
0000            278   _XBR0           DATA 0xe1
0000            279   _XBR1           DATA 0xe2
0000            280   _XBR2           DATA 0xe3
0000            281   _XOSC0CN        DATA 0x86
0000            282   _DPTR           DATA 0x8382
0000            283   _TMR2RL         DATA 0xcbca
0000            284   _TMR3RL         DATA 0x9392
0000            285   _TMR4RL         DATA 0xa3a2
0000            286   _TMR5RL         DATA 0xd3d2
0000            287   _TMR0           DATA 0x8c8a
0000            288   _TMR1           DATA 0x8d8b
0000            289   _TMR2           DATA 0xcfce
0000            290   _TMR3           DATA 0x9594
0000            291   _TMR4           DATA 0xa5a4
0000            292   _TMR5           DATA 0xd5d4
0000            293   _SBRL1          DATA 0x9695
0000            294   _PCA0           DATA 0xfaf9
0000            295   _PCA0CP0        DATA 0xfcfb
0000            296   _PCA0CP1        DATA 0xeae9
0000            297   _PCA0CP2        DATA 0xeceb
0000            298   _PCA0CP3        DATA 0xf5f4
0000            299   _PCA0CP4        DATA 0x8584
0000            300   _PCA0CP5        DATA 0xdedd
0000            301   _ADC0ASA        DATA 0xb6b5
0000            302   _ADC0GT         DATA 0xc4c3
0000            303   _ADC0           DATA 0xbebd
0000            304   _ADC0LT         DATA 0xc6c5
0000            305   _DAC0           DATA 0x8584
0000            306   _DAC1           DATA 0x8a89
0000            307   _DAC2           DATA 0x8c8b
0000            308   _DAC3           DATA 0x8e8d
0000            309   ;--------------------------------------------------------
0000            310   ; special function bits
0000            311   ;--------------------------------------------------------
0000            312   _ACC_0          BIT 0xe0
0000            313   _ACC_1          BIT 0xe1
0000            314   _ACC_2          BIT 0xe2
0000            315   _ACC_3          BIT 0xe3
0000            316   _ACC_4          BIT 0xe4
0000            317   _ACC_5          BIT 0xe5
0000            318   _ACC_6          BIT 0xe6
0000            319   _ACC_7          BIT 0xe7
0000            320   _TEMPE          BIT 0xe8
0000            321   _ADGN0          BIT 0xe9
0000            322   _ADGN1          BIT 0xea
0000            323   _ADWINT         BIT 0xeb
0000            324   _ADBUSY         BIT 0xec
0000            325   _ADINT          BIT 0xed
0000            326   _IPOEN          BIT 0xee
0000            327   _ADEN           BIT 0xef
0000            328   _B_0            BIT 0xf0
0000            329   _B_1            BIT 0xf1
0000            330   _B_2            BIT 0xf2
0000            331   _B_3            BIT 0xf3
0000            332   _B_4            BIT 0xf4
0000            333   _B_5            BIT 0xf5
0000            334   _B_6            BIT 0xf6
0000            335   _B_7            BIT 0xf7
0000            336   _C0FIF          BIT 0xe8
0000            337   _C0RIF          BIT 0xe9
0000            338   _C1FIF          BIT 0xea
0000            339   _C1RIF          BIT 0xeb
0000            340   _C2FIF          BIT 0xec
0000            341   _C2RIF          BIT 0xed
0000            342   _C3FIF          BIT 0xee
0000            343   _C3RIF          BIT 0xef
0000            344   _D1SRC0         BIT 0x88
0000            345   _D1SRC1         BIT 0x89
0000            346   _D1AMEN         BIT 0x8a
0000            347   _D01REFSL       BIT 0x8b
0000            348   _D3SRC0         BIT 0x8c
0000            349   _D3SRC1         BIT 0x8d
0000            350   _D3AMEN         BIT 0x8e
0000            351   _D23REFSL       BIT 0x8f
0000            352   _D0UDIS         BIT 0x98
0000            353   _D1UDIS         BIT 0x99
0000            354   _D2UDIS         BIT 0x9a
0000            355   _D3UDIS         BIT 0x9b
0000            356   _EX0            BIT 0xa8
0000            357   _ET0            BIT 0xa9
0000            358   _EX1            BIT 0xaa
0000            359   _ET1            BIT 0xab
0000            360   _ES0            BIT 0xac
0000            361   _ET2            BIT 0xad
0000            362   _ESPI0          BIT 0xae
0000            363   _EA             BIT 0xaf
0000            364   _PX0            BIT 0xb8
0000            365   _PT0            BIT 0xb9
0000            366   _PX1            BIT 0xba
0000            367   _PT1            BIT 0xbb
0000            368   _PS0            BIT 0xbc
0000            369   _PT2            BIT 0xbd
0000            370   _PSPI0          BIT 0xbe
0000            371   _P0_0           BIT 0x80
0000            372   _P0_1           BIT 0x81
0000            373   _P0_2           BIT 0x82
0000            374   _P0_3           BIT 0x83
0000            375   _P0_4           BIT 0x84
0000            376   _P0_5           BIT 0x85
0000            377   _P0_6           BIT 0x86
0000            378   _P0_7           BIT 0x87
0000            379   _P1_0           BIT 0x90
0000            380   _P1_1           BIT 0x91
0000            381   _P1_2           BIT 0x92
0000            382   _P1_3           BIT 0x93
0000            383   _P1_4           BIT 0x94
0000            384   _P1_5           BIT 0x95
0000            385   _P1_6           BIT 0x96
0000            386   _P1_7           BIT 0x97
0000            387   _P2_0           BIT 0xa0
0000            388   _P2_1           BIT 0xa1
0000            389   _P2_2           BIT 0xa2
0000            390   _P2_3           BIT 0xa3
0000            391   _P2_4           BIT 0xa4
0000            392   _P2_5           BIT 0xa5
0000            393   _P2_6           BIT 0xa6
0000            394   _P3_0           BIT 0xb0
0000            395   _P3_1           BIT 0xb1
0000            396   _P3_2           BIT 0xb2
0000            397   _P3_3           BIT 0xb3
0000            398   _P3_4           BIT 0xb4
0000            399   _P3_7           BIT 0xb7
0000            400   _CCF0           BIT 0xd8
0000            401   _CCF1           BIT 0xd9
0000            402   _CCF2           BIT 0xda
0000            403   _CCF3           BIT 0xdb
0000            404   _CCF4           BIT 0xdc
0000            405   _CCF5           BIT 0xdd
0000            406   _CR             BIT 0xde
0000            407   _CF             BIT 0xdf
0000            408   _PARITY         BIT 0xd0
0000            409   _F1             BIT 0xd1
0000            410   _OV             BIT 0xd2
0000            411   _RS0            BIT 0xd3
0000            412   _RS1            BIT 0xd4
0000            413   _F0             BIT 0xd5
0000            414   _AC             BIT 0xd6
0000            415   _CY             BIT 0xd7
0000            416   _RI             BIT 0x98
0000            417   _TI             BIT 0x99
0000            418   _RB8            BIT 0x9a
0000            419   _TB8            BIT 0x9b
0000            420   _REN            BIT 0x9c
0000            421   _CE             BIT 0x9d
0000            422   _SMODE          BIT 0x9e
0000            423   _RI1            BIT 0xc8
0000            424   _TI1            BIT 0xc9
0000            425   _RBX1           BIT 0xca
0000            426   _TBX1           BIT 0xcb
0000            427   _REN1           BIT 0xcc
0000            428   _PERR1          BIT 0xcd
0000            429   _OVR1           BIT 0xce
0000            430   _SI             BIT 0xc0
0000            431   _ACK            BIT 0xc1
0000            432   _ARBLOST        BIT 0xc2
0000            433   _ACKRQ          BIT 0xc3
0000            434   _STO            BIT 0xc4
0000            435   _STA            BIT 0xc5
0000            436   _TXMODE         BIT 0xc6
0000            437   _MASTER         BIT 0xc7
0000            438   _SPIEN          BIT 0xf8
0000            439   _TXNF           BIT 0xf9
0000            440   _NSSMD0         BIT 0xfa
0000            441   _NSSMD1         BIT 0xfb
0000            442   _RXOVRN         BIT 0xfc
0000            443   _MODF           BIT 0xfd
0000            444   _WCOL           BIT 0xfe
0000            445   _SPIF           BIT 0xff
0000            446   _IT0            BIT 0x88
0000            447   _IE0            BIT 0x89
0000            448   _IT1            BIT 0x8a
0000            449   _IE1            BIT 0x8b
0000            450   _TR0            BIT 0x8c
0000            451   _TF0            BIT 0x8d
0000            452   _TR1            BIT 0x8e
0000            453   _TF1            BIT 0x8f
0000            454   _T2XCLK0        BIT 0xc8
0000            455   _T2XCLK1        BIT 0xc9
0000            456   _TR2            BIT 0xca
0000            457   _T2SPLIT        BIT 0xcb
0000            458   _TF2CEN         BIT 0xcc
0000            459   _TF2LEN         BIT 0xcd
0000            460   _TF2L           BIT 0xce
0000            461   _TF2H           BIT 0xcf
0000            462   _T4XCLK0        BIT 0x98
0000            463   _T4XCLK1        BIT 0x99
0000            464   _TR4            BIT 0x9a
0000            465   _T4SPLIT        BIT 0x9b
0000            466   _TF4CEN         BIT 0x9c
0000            467   _TF4LEN         BIT 0x9d
0000            468   _TF4L           BIT 0x9e
0000            469   _TF4H           BIT 0x9f
0000            470   _T5XCLK0        BIT 0xc0
0000            471   _T5XCLK1        BIT 0xc1
0000            472   _TR5            BIT 0xc2
0000            473   _T5SPLIT        BIT 0xc3
0000            474   _TF5CEN         BIT 0xc4
0000            475   _TF5LEN         BIT 0xc5
0000            476   _TF5L           BIT 0xc6
0000            477   _TF5H           BIT 0xc7
0000            478   _RIE            BIT 0xd8
0000            479   _RXTO0          BIT 0xd9
0000            480   _RXTO1          BIT 0xda
0000            481   _RFRQ           BIT 0xdb
0000            482   _TIE            BIT 0xdc
0000            483   _TXHOLD         BIT 0xdd
0000            484   _TXNF1          BIT 0xde
0000            485   _TFRQ           BIT 0xdf
0000            486   ;--------------------------------------------------------
0000            487   ; overlayable register banks
0000            488   ;--------------------------------------------------------
0000            489            rbank0 segment data overlay
0000            490   ;--------------------------------------------------------
0000            491   ; internal ram data
0000            492   ;--------------------------------------------------------
0000            493            rseg R_DSEG
0000            494   _LCDprint_PARM_2:
0000            495            ds 1
0001            496   _getsn_PARM_2:
0001            497            ds 2
0003            498   _getsn_buff_1_89:
0003            499            ds 3
0006            500   _getsn_sloc0_1_0:
0006            501            ds 2
0008            502   _main_buff_1_95:
0008            503            ds 17
0019            504   ;--------------------------------------------------------
0019            505   ; overlayable items in internal ram 
0019            506   ;--------------------------------------------------------
0000            507            rseg    R_OSEG
0000            508            rseg    R_OSEG
0000            509   _InitPinADC_PARM_2:
0000            510            ds 1
0001            511            rseg    R_OSEG
0001            512   ;--------------------------------------------------------
0001            513   ; indirectly addressable internal ram data
0001            514   ;--------------------------------------------------------
0000            515            rseg R_ISEG
0000            516   ;--------------------------------------------------------
0000            517   ; absolute internal ram data
0000            518   ;--------------------------------------------------------
0000            519            DSEG
0000            520   ;--------------------------------------------------------
0000            521   ; bit data
0000            522   ;--------------------------------------------------------
0000            523            rseg R_BSEG
0000            524   _LCDprint_PARM_3:
0000            525            DBIT    1
0001            526   ;--------------------------------------------------------
0001            527   ; paged external ram data
0001            528   ;--------------------------------------------------------
0000            529            rseg R_PSEG
0000            530   ;--------------------------------------------------------
0000            531   ; external ram data
0000            532   ;--------------------------------------------------------
0000            533            rseg R_XSEG
0000            534   ;--------------------------------------------------------
0000            535   ; absolute external ram data
0000            536   ;--------------------------------------------------------
0000            537            XSEG
0000            538   ;--------------------------------------------------------
0000            539   ; external initialized ram data
0000            540   ;--------------------------------------------------------
0000            541            rseg R_IXSEG
0000            542            rseg R_HOME
0000            543            rseg R_GSINIT
0000            544            rseg R_CSEG
0000            545   ;--------------------------------------------------------
0000            546   ; Reset entry point and interrupt vectors
0000            547   ;--------------------------------------------------------
0000            548            CSEG at 0x0000
0000 020100     549            ljmp    _crt0
0003            550   ;--------------------------------------------------------
0003            551   ; global & static initialisations
0003            552   ;--------------------------------------------------------
0000            553            rseg R_HOME
0000            554            rseg R_GSINIT
0000            555            rseg R_GSINIT
0000            556   ;--------------------------------------------------------
0000            557   ; data variables initialization
0000            558   ;--------------------------------------------------------
0000            559            rseg R_DINIT
0000            560            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            561   ;--------------------------------------------------------
0000            562   ; code
0000            563   ;--------------------------------------------------------
0000            564            rseg R_CSEG
0000            565   ;------------------------------------------------------------
0000            566   ;Allocation info for local variables in function '_c51_external_startup'
0000            567   ;------------------------------------------------------------
0000            568   ;------------------------------------------------------------
0000            569   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:25: char _c51_external_startup (void)
0000            570   ;        -----------------------------------------
0000            571   ;         function _c51_external_startup
0000            572   ;        -----------------------------------------
0000            573   __c51_external_startup:
0000            574            using   0
0000            575   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:28: SFRPAGE = 0x00;
0000 75A700     576            mov     _SFRPAGE,#0x00
0003            577   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:29: WDTCN = 0xDE; //First key
0003 7597DE     578            mov     _WDTCN,#0xDE
0006            579   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:30: WDTCN = 0xAD; //Second key
0006 7597AD     580            mov     _WDTCN,#0xAD
0009            581   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:32: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     582            mov     _VDM0CN,#0x80
000C            583   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:33: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     584            mov     _RSTSRC,#0x06
000F            585   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:40: SFRPAGE = 0x10;
000F 75A710     586            mov     _SFRPAGE,#0x10
0012            587   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:41: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     588            mov     _PFE0CN,#0x20
0015            589   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:42: SFRPAGE = 0x00;
0015 75A700     590            mov     _SFRPAGE,#0x00
0018            591   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:63: CLKSEL = 0x00;
0018 75A900     592            mov     _CLKSEL,#0x00
001B            593   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:64: CLKSEL = 0x00;
001B 75A900     594            mov     _CLKSEL,#0x00
001E            595   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:65: while ((CLKSEL & 0x80) == 0);
001E            596   L002001?:
001E E5A9       597            mov     a,_CLKSEL
0020 30E7B8     598            jnb     acc.7,L002001?
0023            599   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:66: CLKSEL = 0x03;
0023 75A903     600            mov     _CLKSEL,#0x03
0026            601   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:67: CLKSEL = 0x03;
0026 75A903     602            mov     _CLKSEL,#0x03
0029            603   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:68: while ((CLKSEL & 0x80) == 0);
0029            604   L002004?:
0029 E5A9       605            mov     a,_CLKSEL
002B 30E738     606            jnb     acc.7,L002004?
002E            607   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:73: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     608            orl     _P0MDOUT,#0x10
0031            609   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:74: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     610            mov     _XBR0,#0x01
0034            611   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:75: XBR1     = 0X00;
0034 75E200     612            mov     _XBR1,#0x00
0037            613   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:76: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     614            mov     _XBR2,#0x40
003A            615   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:82: SCON0 = 0x10;
003A 759810     616            mov     _SCON0,#0x10
003D            617   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:83: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     618            mov     _TH1,#0xE6
0040            619   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:84: TL1 = TH1;      // Init Timer1
0040 858D8B     620            mov     _TL1,_TH1
0043            621   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:85: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     622            anl     _TMOD,#0x0F
0046            623   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:86: TMOD |=  0x20;                       
0046 438920     624            orl     _TMOD,#0x20
0049            625   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:87: TR1 = 1; // START Timer1
0049 D28E       626            setb    _TR1
004B            627   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:88: TI = 1;  // Indicate TX0 ready
004B D299       628            setb    _TI
004D            629   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:90: return 0;
004D 758200     630            mov     dpl,#0x00
0050 22         631            ret
0051            632   ;------------------------------------------------------------
0051            633   ;Allocation info for local variables in function 'InitADC'
0051            634   ;------------------------------------------------------------
0051            635   ;------------------------------------------------------------
0051            636   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:93: void InitADC (void)
0051            637   ;        -----------------------------------------
0051            638   ;         function InitADC
0051            639   ;        -----------------------------------------
0051            640   _InitADC:
0051            641   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:95: SFRPAGE = 0x00;
0051 75A700     642            mov     _SFRPAGE,#0x00
0054            643   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:96: ADEN=0; // Disable ADC
0054 C2EF       644            clr     _ADEN
0056            645   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:101: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     646            mov     _ADC0CN1,#0x80
0059            647   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:105: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     648            mov     _ADC0CF0,#0x20
005C            649   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:109: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     650            mov     _ADC0CF1,#0x1E
005F            651   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:118: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     652            mov     _ADC0CN0,#0x00
0062            653   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:123: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     654            mov     _ADC0CF2,#0x3F
0065            655   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:127: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     656            mov     _ADC0CN2,#0x00
0068            657   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:129: ADEN=1; // Enable ADC
0068 D2EF       658            setb    _ADEN
006A 22         659            ret
006B            660   ;------------------------------------------------------------
006B            661   ;Allocation info for local variables in function 'Timer3us'
006B            662   ;------------------------------------------------------------
006B            663   ;us                        Allocated to registers r2 
006B            664   ;i                         Allocated to registers r3 
006B            665   ;------------------------------------------------------------
006B            666   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:133: void Timer3us(unsigned char us)
006B            667   ;        -----------------------------------------
006B            668   ;         function Timer3us
006B            669   ;        -----------------------------------------
006B            670   _Timer3us:
006B AA82       671            mov     r2,dpl
006D            672   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:138: CKCON0|=0b_0100_0000;
006D 438E40     673            orl     _CKCON0,#0x40
0070            674   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:140: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     675            mov     _TMR3RL,#0xB8
0073 7593FF     676            mov     (_TMR3RL >> 8),#0xFF
0076            677   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:141: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     678            mov     _TMR3,_TMR3RL
0079 859395     679            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            680   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:143: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     681            mov     _TMR3CN0,#0x04
007F            682   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:144: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       683            mov     r3,#0x00
0081            684   L004004?:
0081 C3         685            clr     c
0082 EB         686            mov     a,r3
0083 9A         687            subb    a,r2
0084 5001       688            jnc     L004007?
0086            689   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:146: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            690   L004001?:
0086 E591       691            mov     a,_TMR3CN0
0088 30E738     692            jnb     acc.7,L004001?
008B            693   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:147: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     694            anl     _TMR3CN0,#0x7F
008E            695   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:144: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         696            inc     r3
008F 8001       697            sjmp    L004004?
0091            698   L004007?:
0091            699   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:149: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     700            mov     _TMR3CN0,#0x00
0094 22         701            ret
0095            702   ;------------------------------------------------------------
0095            703   ;Allocation info for local variables in function 'waitms'
0095            704   ;------------------------------------------------------------
0095            705   ;ms                        Allocated to registers r2 r3 
0095            706   ;j                         Allocated to registers r4 r5 
0095            707   ;k                         Allocated to registers r6 
0095            708   ;------------------------------------------------------------
0095            709   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:152: void waitms (unsigned int ms)
0095            710   ;        -----------------------------------------
0095            711   ;         function waitms
0095            712   ;        -----------------------------------------
0095            713   _waitms:
0095 AA82       714            mov     r2,dpl
0097 AB83       715            mov     r3,dph
0099            716   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:156: for(j=0; j<ms; j++)
0099 7C00       717            mov     r4,#0x00
009B 7D00       718            mov     r5,#0x00
009D            719   L005005?:
009D C3         720            clr     c
009E EC         721            mov     a,r4
009F 9A         722            subb    a,r2
00A0 ED         723            mov     a,r5
00A1 9B         724            subb    a,r3
00A2 5001       725            jnc     L005009?
00A4            726   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:157: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       727            mov     r6,#0x00
00A6            728   L005001?:
00A6 BE0478     729            cjne    r6,#0x04,L005018?
00A9            730   L005018?:
00A9 5001       731            jnc     L005007?
00AB 7582FA     732            mov     dpl,#0xFA
00AE C002       733            push    ar2
00B0 C003       734            push    ar3
00B2 C004       735            push    ar4
00B4 C005       736            push    ar5
00B6 C006       737            push    ar6
00B8 120100     738            lcall   _Timer3us
00BB D006       739            pop     ar6
00BD D005       740            pop     ar5
00BF D004       741            pop     ar4
00C1 D003       742            pop     ar3
00C3 D002       743            pop     ar2
00C5 0E         744            inc     r6
00C6 8001       745            sjmp    L005001?
00C8            746   L005007?:
00C8            747   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:156: for(j=0; j<ms; j++)
00C8 0C         748            inc     r4
00C9 BC00B8     749            cjne    r4,#0x00,L005005?
00CC 0D         750            inc     r5
00CD 8001       751            sjmp    L005005?
00CF            752   L005009?:
00CF 22         753            ret
00D0            754   ;------------------------------------------------------------
00D0            755   ;Allocation info for local variables in function 'InitPinADC'
00D0            756   ;------------------------------------------------------------
00D0            757   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
00D0            758   ;portno                    Allocated to registers r2 
00D0            759   ;mask                      Allocated to registers r3 
00D0            760   ;------------------------------------------------------------
00D0            761   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:162: void InitPinADC (unsigned char portno, unsigned char pin_num)
00D0            762   ;        -----------------------------------------
00D0            763   ;         function InitPinADC
00D0            764   ;        -----------------------------------------
00D0            765   _InitPinADC:
00D0 AA82       766            mov     r2,dpl
00D2            767   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:166: mask=1<<pin_num;
00D2 8560F0     768            mov     b,_InitPinADC_PARM_2
00D5 05F0       769            inc     b
00D7 7401       770            mov     a,#0x01
00D9 8001       771            sjmp    L006013?
00DB            772   L006011?:
00DB 25E0       773            add     a,acc
00DD            774   L006013?:
00DD D5F078     775            djnz    b,L006011?
00E0 FB         776            mov     r3,a
00E1            777   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:168: SFRPAGE = 0x20;
00E1 75A720     778            mov     _SFRPAGE,#0x20
00E4            779   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:169: switch (portno)
00E4 BA00B8     780            cjne    r2,#0x00,L006014?
00E7 8001       781            sjmp    L006001?
00E9            782   L006014?:
00E9 BA0138     783            cjne    r2,#0x01,L006015?
00EC 8001       784            sjmp    L006002?
00EE            785   L006015?:
00EE            786   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:171: case 0:
00EE BA02B8     787            cjne    r2,#0x02,L006005?
00F1 8001       788            sjmp    L006003?
00F3            789   L006001?:
00F3            790   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:172: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         791            mov     a,r3
00F4 F4         792            cpl     a
00F5 FA         793            mov     r2,a
00F6 52F1       794            anl     _P0MDIN,a
00F8            795   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:173: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         796            mov     a,r3
00F9 42D4       797            orl     _P0SKIP,a
00FB            798   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:174: break;
00FB            799   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:175: case 1:
00FB 8001       800            sjmp    L006005?
00FD            801   L006002?:
00FD            802   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:176: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         803            mov     a,r3
00FE F4         804            cpl     a
00FF FA         805            mov     r2,a
0100 52F2       806            anl     _P1MDIN,a
0102            807   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:177: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         808            mov     a,r3
0103 42D5       809            orl     _P1SKIP,a
0105            810   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:178: break;
0105            811   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:179: case 2:
0105 8001       812            sjmp    L006005?
0107            813   L006003?:
0107            814   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:180: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         815            mov     a,r3
0108 F4         816            cpl     a
0109 FA         817            mov     r2,a
010A 52F3       818            anl     _P2MDIN,a
010C            819   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:181: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         820            mov     a,r3
010D 42CC       821            orl     _P2SKIP,a
010F            822   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:185: }
010F            823   L006005?:
010F            824   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:186: SFRPAGE = 0x00;
010F 75A700     825            mov     _SFRPAGE,#0x00
0112 22         826            ret
0113            827   ;------------------------------------------------------------
0113            828   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            829   ;------------------------------------------------------------
0113            830   ;pin                       Allocated to registers 
0113            831   ;------------------------------------------------------------
0113            832   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:189: unsigned int ADC_at_Pin(unsigned char pin)
0113            833   ;        -----------------------------------------
0113            834   ;         function ADC_at_Pin
0113            835   ;        -----------------------------------------
0113            836   _ADC_at_Pin:
0113 8582BB     837            mov     _ADC0MX,dpl
0116            838   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:192: ADINT = 0;
0116 C2ED       839            clr     _ADINT
0118            840   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:193: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       841            setb    _ADBUSY
011A            842   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:194: while (!ADINT); // Wait for conversion to complete
011A            843   L007001?:
011A 30ED38     844            jnb     _ADINT,L007001?
011D            845   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:195: return (ADC0);
011D 85BD82     846            mov     dpl,_ADC0
0120 85BE83     847            mov     dph,(_ADC0 >> 8)
0123 22         848            ret
0124            849   ;------------------------------------------------------------
0124            850   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            851   ;------------------------------------------------------------
0124            852   ;pin                       Allocated to registers r2 
0124            853   ;------------------------------------------------------------
0124            854   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:198: float Volts_at_Pin(unsigned char pin)
0124            855   ;        -----------------------------------------
0124            856   ;         function Volts_at_Pin
0124            857   ;        -----------------------------------------
0124            858   _Volts_at_Pin:
0124            859   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:200: return ((ADC_at_Pin(pin)*VDD)/16383.0);
0124 120100     860            lcall   _ADC_at_Pin
0127 120100     861            lcall   ___uint2fs
012A AA82       862            mov     r2,dpl
012C AB83       863            mov     r3,dph
012E ACF0       864            mov     r4,b
0130 FD         865            mov     r5,a
0131 C002       866            push    ar2
0133 C003       867            push    ar3
0135 C004       868            push    ar4
0137 C005       869            push    ar5
0139 906C8B     870            mov     dptr,#0x6C8B
013C 75F053     871            mov     b,#0x53
013F 7440       872            mov     a,#0x40
0141 120100     873            lcall   ___fsmul
0144 AA82       874            mov     r2,dpl
0146 AB83       875            mov     r3,dph
0148 ACF0       876            mov     r4,b
014A FD         877            mov     r5,a
014B E581       878            mov     a,sp
014D 24FC       879            add     a,#0xfc
014F F581       880            mov     sp,a
0151 E4         881            clr     a
0152 C0E0       882            push    acc
0154 74FC       883            mov     a,#0xFC
0156 C0E0       884            push    acc
0158 747F       885            mov     a,#0x7F
015A C0E0       886            push    acc
015C 7446       887            mov     a,#0x46
015E C0E0       888            push    acc
0160 8A82       889            mov     dpl,r2
0162 8B83       890            mov     dph,r3
0164 8CF0       891            mov     b,r4
0166 ED         892            mov     a,r5
0167 120100     893            lcall   ___fsdiv
016A AA82       894            mov     r2,dpl
016C AB83       895            mov     r3,dph
016E ACF0       896            mov     r4,b
0170 FD         897            mov     r5,a
0171 E581       898            mov     a,sp
0173 24FC       899            add     a,#0xfc
0175 F581       900            mov     sp,a
0177 8A82       901            mov     dpl,r2
0179 8B83       902            mov     dph,r3
017B 8CF0       903            mov     b,r4
017D ED         904            mov     a,r5
017E 22         905            ret
017F            906   ;------------------------------------------------------------
017F            907   ;Allocation info for local variables in function 'LCD_pulse'
017F            908   ;------------------------------------------------------------
017F            909   ;------------------------------------------------------------
017F            910   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:203: void LCD_pulse (void)
017F            911   ;        -----------------------------------------
017F            912   ;         function LCD_pulse
017F            913   ;        -----------------------------------------
017F            914   _LCD_pulse:
017F            915   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:205: LCD_E=1;
017F D296       916            setb    _P1_6
0181            917   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:206: Timer3us(40);
0181 758228     918            mov     dpl,#0x28
0184 120100     919            lcall   _Timer3us
0187            920   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:207: LCD_E=0;
0187 C296       921            clr     _P1_6
0189 22         922            ret
018A            923   ;------------------------------------------------------------
018A            924   ;Allocation info for local variables in function 'LCD_byte'
018A            925   ;------------------------------------------------------------
018A            926   ;x                         Allocated to registers r2 
018A            927   ;------------------------------------------------------------
018A            928   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:211: void LCD_byte (unsigned char x)
018A            929   ;        -----------------------------------------
018A            930   ;         function LCD_byte
018A            931   ;        -----------------------------------------
018A            932   _LCD_byte:
018A AA82       933            mov     r2,dpl
018C            934   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:214: ACC=x; //Send high nible
018C 8AE0       935            mov     _ACC,r2
018E            936   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:215: LCD_D7=ACC_7;
018E A2E7       937            mov     c,_ACC_7
0190 9286       938            mov     _P0_6,c
0192            939   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:216: LCD_D6=ACC_6;
0192 A2E6       940            mov     c,_ACC_6
0194 9287       941            mov     _P0_7,c
0196            942   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:217: LCD_D5=ACC_5;
0196 A2E5       943            mov     c,_ACC_5
0198 9290       944            mov     _P1_0,c
019A            945   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:218: LCD_D4=ACC_4;
019A A2E4       946            mov     c,_ACC_4
019C 9291       947            mov     _P1_1,c
019E            948   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:219: LCD_pulse();
019E C002       949            push    ar2
01A0 120100     950            lcall   _LCD_pulse
01A3            951   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:220: Timer3us(40);
01A3 758228     952            mov     dpl,#0x28
01A6 120100     953            lcall   _Timer3us
01A9 D002       954            pop     ar2
01AB            955   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:221: ACC=x; //Send low nible
01AB 8AE0       956            mov     _ACC,r2
01AD            957   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:222: LCD_D7=ACC_3;
01AD A2E3       958            mov     c,_ACC_3
01AF 9286       959            mov     _P0_6,c
01B1            960   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:223: LCD_D6=ACC_2;
01B1 A2E2       961            mov     c,_ACC_2
01B3 9287       962            mov     _P0_7,c
01B5            963   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:224: LCD_D5=ACC_1;
01B5 A2E1       964            mov     c,_ACC_1
01B7 9290       965            mov     _P1_0,c
01B9            966   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:225: LCD_D4=ACC_0;
01B9 A2E0       967            mov     c,_ACC_0
01BB 9291       968            mov     _P1_1,c
01BD            969   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:226: LCD_pulse();
01BD 020100     970            ljmp    _LCD_pulse
01C0            971   ;------------------------------------------------------------
01C0            972   ;Allocation info for local variables in function 'WriteData'
01C0            973   ;------------------------------------------------------------
01C0            974   ;x                         Allocated to registers r2 
01C0            975   ;------------------------------------------------------------
01C0            976   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:229: void WriteData (unsigned char x)
01C0            977   ;        -----------------------------------------
01C0            978   ;         function WriteData
01C0            979   ;        -----------------------------------------
01C0            980   _WriteData:
01C0 AA82       981            mov     r2,dpl
01C2            982   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:231: LCD_RS=1;
01C2 D2A0       983            setb    _P2_0
01C4            984   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:232: LCD_byte(x);
01C4 8A82       985            mov     dpl,r2
01C6 120100     986            lcall   _LCD_byte
01C9            987   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:233: waitms(2);
01C9 900002     988            mov     dptr,#0x0002
01CC 020100     989            ljmp    _waitms
01CF            990   ;------------------------------------------------------------
01CF            991   ;Allocation info for local variables in function 'WriteCommand'
01CF            992   ;------------------------------------------------------------
01CF            993   ;x                         Allocated to registers r2 
01CF            994   ;------------------------------------------------------------
01CF            995   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:236: void WriteCommand (unsigned char x)
01CF            996   ;        -----------------------------------------
01CF            997   ;         function WriteCommand
01CF            998   ;        -----------------------------------------
01CF            999   _WriteCommand:
01CF AA82      1000            mov     r2,dpl
01D1           1001   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:238: LCD_RS=0;
01D1 C2A0      1002            clr     _P2_0
01D3           1003   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:239: LCD_byte(x);
01D3 8A82      1004            mov     dpl,r2
01D5 120100    1005            lcall   _LCD_byte
01D8           1006   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:240: waitms(5);
01D8 900005    1007            mov     dptr,#0x0005
01DB 020100    1008            ljmp    _waitms
01DE           1009   ;------------------------------------------------------------
01DE           1010   ;Allocation info for local variables in function 'LCD_4BIT'
01DE           1011   ;------------------------------------------------------------
01DE           1012   ;------------------------------------------------------------
01DE           1013   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:243: void LCD_4BIT (void)
01DE           1014   ;        -----------------------------------------
01DE           1015   ;         function LCD_4BIT
01DE           1016   ;        -----------------------------------------
01DE           1017   _LCD_4BIT:
01DE           1018   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:245: LCD_E=0; // Resting state of LCD's enable is zero
01DE C296      1019            clr     _P1_6
01E0           1020   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:246: LCD_RW=0; // We are only writing to the LCD in this program
01E0 C297      1021            clr     _P1_7
01E2           1022   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:247: waitms(20);
01E2 900014    1023            mov     dptr,#0x0014
01E5 120100    1024            lcall   _waitms
01E8           1025   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:249: WriteCommand(0x33);
01E8 758233    1026            mov     dpl,#0x33
01EB 120100    1027            lcall   _WriteCommand
01EE           1028   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:250: WriteCommand(0x33);
01EE 758233    1029            mov     dpl,#0x33
01F1 120100    1030            lcall   _WriteCommand
01F4           1031   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:251: WriteCommand(0x32); // Change to 4-bit mode
01F4 758232    1032            mov     dpl,#0x32
01F7 120100    1033            lcall   _WriteCommand
01FA           1034   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:254: WriteCommand(0x28);
01FA 758228    1035            mov     dpl,#0x28
01FD 120100    1036            lcall   _WriteCommand
0200           1037   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:255: WriteCommand(0x0c);
0200 75820C    1038            mov     dpl,#0x0C
0203 120100    1039            lcall   _WriteCommand
0206           1040   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:256: WriteCommand(0x01); // Clear screen command (takes some time)
0206 758201    1041            mov     dpl,#0x01
0209 120100    1042            lcall   _WriteCommand
020C           1043   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:257: waitms(20); // Wait for clear screen command to finsih.
020C 900014    1044            mov     dptr,#0x0014
020F 020100    1045            ljmp    _waitms
0212           1046   ;------------------------------------------------------------
0212           1047   ;Allocation info for local variables in function 'LCDprint'
0212           1048   ;------------------------------------------------------------
0212           1049   ;line                      Allocated with name '_LCDprint_PARM_2'
0212           1050   ;string                    Allocated to registers r2 r3 r4 
0212           1051   ;j                         Allocated to registers r5 r6 
0212           1052   ;------------------------------------------------------------
0212           1053   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:260: void LCDprint(char * string, unsigned char line, bit clear)
0212           1054   ;        -----------------------------------------
0212           1055   ;         function LCDprint
0212           1056   ;        -----------------------------------------
0212           1057   _LCDprint:
0212 AA82      1058            mov     r2,dpl
0214 AB83      1059            mov     r3,dph
0216 ACF0      1060            mov     r4,b
0218           1061   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:264: WriteCommand(line==2?0xc0:0x80);
0218 7402      1062            mov     a,#0x02
021A B51078    1063            cjne    a,_LCDprint_PARM_2,L014013?
021D 7DC0      1064            mov     r5,#0xC0
021F 8001      1065            sjmp    L014014?
0221           1066   L014013?:
0221 7D80      1067            mov     r5,#0x80
0223           1068   L014014?:
0223 8D82      1069            mov     dpl,r5
0225 C002      1070            push    ar2
0227 C003      1071            push    ar3
0229 C004      1072            push    ar4
022B 120100    1073            lcall   _WriteCommand
022E           1074   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:265: waitms(5);
022E 900005    1075            mov     dptr,#0x0005
0231 120100    1076            lcall   _waitms
0234 D004      1077            pop     ar4
0236 D003      1078            pop     ar3
0238 D002      1079            pop     ar2
023A           1080   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:266: for(j=0; string[j]!=0; j++)         WriteData(string[j]);// Write the message
023A 7D00      1081            mov     r5,#0x00
023C 7E00      1082            mov     r6,#0x00
023E           1083   L014003?:
023E ED        1084            mov     a,r5
023F 2A        1085            add     a,r2
0240 FF        1086            mov     r7,a
0241 EE        1087            mov     a,r6
0242 3B        1088            addc    a,r3
0243 F8        1089            mov     r0,a
0244 8C01      1090            mov     ar1,r4
0246 8F82      1091            mov     dpl,r7
0248 8883      1092            mov     dph,r0
024A 89F0      1093            mov     b,r1
024C 120100    1094            lcall   __gptrget
024F FF        1095            mov     r7,a
0250 6001      1096            jz      L014006?
0252 8F82      1097            mov     dpl,r7
0254 C002      1098            push    ar2
0256 C003      1099            push    ar3
0258 C004      1100            push    ar4
025A C005      1101            push    ar5
025C C006      1102            push    ar6
025E 120100    1103            lcall   _WriteData
0261 D006      1104            pop     ar6
0263 D005      1105            pop     ar5
0265 D004      1106            pop     ar4
0267 D003      1107            pop     ar3
0269 D002      1108            pop     ar2
026B 0D        1109            inc     r5
026C BD00F8    1110            cjne    r5,#0x00,L014003?
026F 0E        1111            inc     r6
0270 8001      1112            sjmp    L014003?
0272           1113   L014006?:
0272           1114   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:267: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0272 3080B8    1115            jnb     _LCDprint_PARM_3,L014011?
0275 8D02      1116            mov     ar2,r5
0277 8E03      1117            mov     ar3,r6
0279           1118   L014007?:
0279 C3        1119            clr     c
027A EA        1120            mov     a,r2
027B 9410      1121            subb    a,#0x10
027D EB        1122            mov     a,r3
027E 6480      1123            xrl     a,#0x80
0280 9480      1124            subb    a,#0x80
0282 5001      1125            jnc     L014011?
0284 758220    1126            mov     dpl,#0x20
0287 C002      1127            push    ar2
0289 C003      1128            push    ar3
028B 120100    1129            lcall   _WriteData
028E D003      1130            pop     ar3
0290 D002      1131            pop     ar2
0292 0A        1132            inc     r2
0293 BA00F8    1133            cjne    r2,#0x00,L014007?
0296 0B        1134            inc     r3
0297 8001      1135            sjmp    L014007?
0299           1136   L014011?:
0299 22        1137            ret
029A           1138   ;------------------------------------------------------------
029A           1139   ;Allocation info for local variables in function 'getsn'
029A           1140   ;------------------------------------------------------------
029A           1141   ;len                       Allocated with name '_getsn_PARM_2'
029A           1142   ;buff                      Allocated with name '_getsn_buff_1_89'
029A           1143   ;j                         Allocated with name '_getsn_sloc0_1_0'
029A           1144   ;c                         Allocated to registers r3 
029A           1145   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
029A           1146   ;------------------------------------------------------------
029A           1147   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:270: int getsn (char * buff, int len)
029A           1148   ;        -----------------------------------------
029A           1149   ;         function getsn
029A           1150   ;        -----------------------------------------
029A           1151   _getsn:
029A 8582A8    1152            mov     _getsn_buff_1_89,dpl
029D 8583A9    1153            mov     (_getsn_buff_1_89 + 1),dph
02A0 85F0AA    1154            mov     (_getsn_buff_1_89 + 2),b
02A3           1155   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:275: for(j=0; j<(len-1); j++)
02A3 E4        1156            clr     a
02A4 F5F8      1157            mov     _getsn_sloc0_1_0,a
02A6 F5F9      1158            mov     (_getsn_sloc0_1_0 + 1),a
02A8 E5C0      1159            mov     a,_getsn_PARM_2
02AA 24FF      1160            add     a,#0xff
02AC FF        1161            mov     r7,a
02AD E5C1      1162            mov     a,(_getsn_PARM_2 + 1)
02AF 34FF      1163            addc    a,#0xff
02B1 F8        1164            mov     r0,a
02B2 7900      1165            mov     r1,#0x00
02B4 7A00      1166            mov     r2,#0x00
02B6           1167   L015005?:
02B6 C3        1168            clr     c
02B7 E9        1169            mov     a,r1
02B8 9F        1170            subb    a,r7
02B9 EA        1171            mov     a,r2
02BA 6480      1172            xrl     a,#0x80
02BC 88F0      1173            mov     b,r0
02BE 63F080    1174            xrl     b,#0x80
02C1 95F0      1175            subb    a,b
02C3 5001      1176            jnc     L015008?
02C5           1177   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:277: c=getchar();
02C5 C002      1178            push    ar2
02C7 C007      1179            push    ar7
02C9 C000      1180            push    ar0
02CB C001      1181            push    ar1
02CD 120100    1182            lcall   _getchar
02D0 AB82      1183            mov     r3,dpl
02D2 D001      1184            pop     ar1
02D4 D000      1185            pop     ar0
02D6 D007      1186            pop     ar7
02D8 D002      1187            pop     ar2
02DA           1188   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:278: if ( (c=='\n') || (c=='\r') )
02DA BB0AF8    1189            cjne    r3,#0x0A,L015015?
02DD 8001      1190            sjmp    L015001?
02DF           1191   L015015?:
02DF BB0D78    1192            cjne    r3,#0x0D,L015002?
02E2           1193   L015001?:
02E2           1194   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:280: buff[j]=0;
02E2 E5F8      1195            mov     a,_getsn_sloc0_1_0
02E4 25A8      1196            add     a,_getsn_buff_1_89
02E6 FC        1197            mov     r4,a
02E7 E5F9      1198            mov     a,(_getsn_sloc0_1_0 + 1)
02E9 35A9      1199            addc    a,(_getsn_buff_1_89 + 1)
02EB FD        1200            mov     r5,a
02EC AEAA      1201            mov     r6,(_getsn_buff_1_89 + 2)
02EE 8C82      1202            mov     dpl,r4
02F0 8D83      1203            mov     dph,r5
02F2 8EF0      1204            mov     b,r6
02F4 E4        1205            clr     a
02F5 120100    1206            lcall   __gptrput
02F8           1207   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:281: return j;
02F8 85F882    1208            mov     dpl,_getsn_sloc0_1_0
02FB 85F983    1209            mov     dph,(_getsn_sloc0_1_0 + 1)
02FE 22        1210            ret
02FF           1211   L015002?:
02FF           1212   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:285: buff[j]=c;
02FF E9        1213            mov     a,r1
0300 25A8      1214            add     a,_getsn_buff_1_89
0302 FC        1215            mov     r4,a
0303 EA        1216            mov     a,r2
0304 35A9      1217            addc    a,(_getsn_buff_1_89 + 1)
0306 FD        1218            mov     r5,a
0307 AEAA      1219            mov     r6,(_getsn_buff_1_89 + 2)
0309 8C82      1220            mov     dpl,r4
030B 8D83      1221            mov     dph,r5
030D 8EF0      1222            mov     b,r6
030F EB        1223            mov     a,r3
0310 120100    1224            lcall   __gptrput
0313           1225   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:275: for(j=0; j<(len-1); j++)
0313 09        1226            inc     r1
0314 B90000    1227            cjne    r1,#0x00,L015018?
0317 0A        1228            inc     r2
0318           1229   L015018?:
0318 89F8      1230            mov     _getsn_sloc0_1_0,r1
031A 8AF9      1231            mov     (_getsn_sloc0_1_0 + 1),r2
031C 8001      1232            sjmp    L015005?
031E           1233   L015008?:
031E           1234   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:288: buff[j]=0;
031E E5F8      1235            mov     a,_getsn_sloc0_1_0
0320 25A8      1236            add     a,_getsn_buff_1_89
0322 FA        1237            mov     r2,a
0323 E5F9      1238            mov     a,(_getsn_sloc0_1_0 + 1)
0325 35A9      1239            addc    a,(_getsn_buff_1_89 + 1)
0327 FB        1240            mov     r3,a
0328 ACAA      1241            mov     r4,(_getsn_buff_1_89 + 2)
032A 8A82      1242            mov     dpl,r2
032C 8B83      1243            mov     dph,r3
032E 8CF0      1244            mov     b,r4
0330 E4        1245            clr     a
0331 120100    1246            lcall   __gptrput
0334           1247   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:289: return len;
0334 85C082    1248            mov     dpl,_getsn_PARM_2
0337 85C183    1249            mov     dph,(_getsn_PARM_2 + 1)
033A 22        1250            ret
033B           1251   ;------------------------------------------------------------
033B           1252   ;Allocation info for local variables in function 'main'
033B           1253   ;------------------------------------------------------------
033B           1254   ;buff                      Allocated with name '_main_buff_1_95'
033B           1255   ;voltage                   Allocated to registers r2 r3 r4 r5 
033B           1256   ;temperature               Allocated to registers r2 r3 r4 r5 
033B           1257   ;------------------------------------------------------------
033B           1258   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:295: void main (void)
033B           1259   ;        -----------------------------------------
033B           1260   ;         function main
033B           1261   ;        -----------------------------------------
033B           1262   _main:
033B           1263   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:303: LCD_4BIT();
033B 120100    1264            lcall   _LCD_4BIT
033E           1265   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:309: waitms(500); // Give PuTTy a chance to start before sending
033E 9001F4    1266            mov     dptr,#0x01F4
0341 120100    1267            lcall   _waitms
0344           1268   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:310: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0344 7440      1269            mov     a,#__str_0
0346 C0E0      1270            push    acc
0348 74C0      1271            mov     a,#(__str_0 >> 8)
034A C0E0      1272            push    acc
034C 7480      1273            mov     a,#0x80
034E C0E0      1274            push    acc
0350 120100    1275            lcall   _printf
0353 1581      1276            dec     sp
0355 1581      1277            dec     sp
0357 1581      1278            dec     sp
0359           1279   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:314: LCDprint("temperature:", 1, 1);
0359 751001    1280            mov     _LCDprint_PARM_2,#0x01
035C D280      1281            setb    _LCDprint_PARM_3
035E 90C0C0    1282            mov     dptr,#__str_1
0361 75F080    1283            mov     b,#0x80
0364 120100    1284            lcall   _LCDprint
0367           1285   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:317: InitPinADC(2, 2); // Configure P2.2 as analog input
0367 756002    1286            mov     _InitPinADC_PARM_2,#0x02
036A 758202    1287            mov     dpl,#0x02
036D 120100    1288            lcall   _InitPinADC
0370           1289   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:318: InitPinADC(2, 3); // Configure P2.3 as analog input
0370 756003    1290            mov     _InitPinADC_PARM_2,#0x03
0373 758202    1291            mov     dpl,#0x02
0376 120100    1292            lcall   _InitPinADC
0379           1293   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:319: InitPinADC(2, 4); // Configure P2.4 as analog input
0379 756004    1294            mov     _InitPinADC_PARM_2,#0x04
037C 758202    1295            mov     dpl,#0x02
037F 120100    1296            lcall   _InitPinADC
0382           1297   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:320: InitPinADC(2, 5); // Configure P2.5 as analog input
0382 756005    1298            mov     _InitPinADC_PARM_2,#0x05
0385 758202    1299            mov     dpl,#0x02
0388 120100    1300            lcall   _InitPinADC
038B           1301   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:321: InitADC();
038B 120100    1302            lcall   _InitADC
038E           1303   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:323: while(1)
038E           1304   L016002?:
038E           1305   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:326: voltage = Volts_at_Pin(QFP32_MUX_P2_2);
038E 75820F    1306            mov     dpl,#0x0F
0391 120100    1307            lcall   _Volts_at_Pin
0394 AA82      1308            mov     r2,dpl
0396 AB83      1309            mov     r3,dph
0398 ACF0      1310            mov     r4,b
039A FD        1311            mov     r5,a
039B           1312   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:332: temperature = 100.0*(voltage-2.73);
039B 7452      1313            mov     a,#0x52
039D C0E0      1314            push    acc
039F 74B8      1315            mov     a,#0xB8
03A1 C0E0      1316            push    acc
03A3 742E      1317            mov     a,#0x2E
03A5 C0E0      1318            push    acc
03A7 7440      1319            mov     a,#0x40
03A9 C0E0      1320            push    acc
03AB 8A82      1321            mov     dpl,r2
03AD 8B83      1322            mov     dph,r3
03AF 8CF0      1323            mov     b,r4
03B1 ED        1324            mov     a,r5
03B2 120100    1325            lcall   ___fssub
03B5 AA82      1326            mov     r2,dpl
03B7 AB83      1327            mov     r3,dph
03B9 ACF0      1328            mov     r4,b
03BB FD        1329            mov     r5,a
03BC E581      1330            mov     a,sp
03BE 24FC      1331            add     a,#0xfc
03C0 F581      1332            mov     sp,a
03C2 C002      1333            push    ar2
03C4 C003      1334            push    ar3
03C6 C004      1335            push    ar4
03C8 C005      1336            push    ar5
03CA 900000    1337            mov     dptr,#0x0000
03CD 75F0C8    1338            mov     b,#0xC8
03D0 7442      1339            mov     a,#0x42
03D2 120100    1340            lcall   ___fsmul
03D5 AA82      1341            mov     r2,dpl
03D7 AB83      1342            mov     r3,dph
03D9 ACF0      1343            mov     r4,b
03DB FD        1344            mov     r5,a
03DC E581      1345            mov     a,sp
03DE 24FC      1346            add     a,#0xfc
03E0 F581      1347            mov     sp,a
03E2           1348   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:333: sprintf(buff," %.5f",temperature); 
03E2 C002      1349            push    ar2
03E4 C003      1350            push    ar3
03E6 C004      1351            push    ar4
03E8 C005      1352            push    ar5
03EA C002      1353            push    ar2
03EC C003      1354            push    ar3
03EE C004      1355            push    ar4
03F0 C005      1356            push    ar5
03F2 7480      1357            mov     a,#__str_2
03F4 C0E0      1358            push    acc
03F6 74C1      1359            mov     a,#(__str_2 >> 8)
03F8 C0E0      1360            push    acc
03FA 7480      1361            mov     a,#0x80
03FC C0E0      1362            push    acc
03FE 7438      1363            mov     a,#_main_buff_1_95
0400 C0E0      1364            push    acc
0402 74B5      1365            mov     a,#(_main_buff_1_95 >> 8)
0404 C0E0      1366            push    acc
0406 7440      1367            mov     a,#0x40
0408 C0E0      1368            push    acc
040A 120100    1369            lcall   _sprintf
040D E581      1370            mov     a,sp
040F 24F6      1371            add     a,#0xf6
0411 F581      1372            mov     sp,a
0413           1373   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:334: LCDprint(buff,2,1);
0413 751002    1374            mov     _LCDprint_PARM_2,#0x02
0416 D280      1375            setb    _LCDprint_PARM_3
0418 90B538    1376            mov     dptr,#_main_buff_1_95
041B 75F040    1377            mov     b,#0x40
041E 120100    1378            lcall   _LCDprint
0421           1379   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:336: printf ("%0.3f\n", temperature);
0421 7400      1380            mov     a,#__str_3
0423 C0E0      1381            push    acc
0425 74C2      1382            mov     a,#(__str_3 >> 8)
0427 C0E0      1383            push    acc
0429 7480      1384            mov     a,#0x80
042B C0E0      1385            push    acc
042D 120100    1386            lcall   _printf
0430 E581      1387            mov     a,sp
0432 24F9      1388            add     a,#0xf9
0434 F581      1389            mov     sp,a
0436           1390   ;        C:\CrossIDE\Call51\Bin\lab4\ADC_EFM8.c:337: waitms(1000);
0436 9003E8    1391            mov     dptr,#0x03E8
0439 120100    1392            lcall   _waitms
043C 020100    1393            ljmp    L016002?
043F           1394            rseg R_CSEG
043F           1395   
0000           1396            rseg R_XINIT
0000           1397   
0000           1398            rseg R_CONST
0000           1399   __str_0:
0000 1B        1400            db 0x1B
0001 5B324A    1401            db '[2J'
0004 00        1402            db 0x00
0005           1403   __str_1:
0005 74656D70  1404            db 'temperature:'
     65726174
     7572653A
0011 00        1405            db 0x00
0012           1406   __str_2:
0012 20252E35  1407            db ' %.5f'
     66
0017 00        1408            db 0x00
0018           1409   __str_3:
0018 25302E33  1410            db '%0.3f'
     66
001D 0A        1411            db 0x0A
001E 00        1412            db 0x00
001F           1413   
0003           1414            CSEG
0003           1415   
0003           1416   end
